{"version":3,"sources":["index.ts","src\\ease\\consts.ts","src\\ease\\index.ts"],"names":[],"mappings":";ACAa,aAAA,QAAA,YAAA,EAAA,QAAA,GAAK,KAAK,GACrB,QAAA,IAAM,EAAI,QAAA;;ACqDC,aAAA,QAAA,YAAA,EAnDb,IAAA,EAAA,QAAA,YAEA,SAAA,EAAiB,GACR,OAAA,SAAiB,GACf,OAAA,EAAI,EAAO,EAAI,IAI1B,SAAA,EAAe,GACP,IAAA,EAAU,EAAQ,GACjB,OAAA,SAAS,GACP,OAAA,EAAI,GAAM,GAAM,EAAW,EAAJ,GAAS,GAAM,GAAM,EAAQ,EAAI,EAAI,IAI1D,QAAA,WAAuB,SAAgB,GAC3C,OAAA,GAGI,QAAA,WAAuB,SAAoB,GAC7C,OAAA,EAAI,GAEb,QAAA,YAAwB,EAAQ,QAAA,YAChC,QAAA,cAA0B,EAAM,QAAA,YAErB,QAAA,UAAsB,SAAmB,GAC3C,OAAA,EAAI,EAAI,GAEjB,QAAA,WAAa,EAAQ,QAAA,WACrB,QAAA,aAAe,EAAM,QAAA,WAEV,QAAA,YAAwB,SAAqB,GAC/C,OAAA,EAAI,EAAI,EAAI,GAErB,QAAA,aAAe,EAAQ,QAAA,aACvB,QAAA,eAAiB,EAAM,QAAA,aAEZ,QAAA,YAAwB,SAAqB,GAC/C,OAAA,EAAI,EAAI,EAAI,EAAI,GAEzB,QAAA,aAAe,EAAQ,QAAA,aACvB,QAAA,eAAiB,EAAM,QAAA,aAEZ,QAAA,WAAuB,SAAmB,GAC5C,OAAA,KAAK,IAAI,EAAI,EAAA,GAAK,KAE3B,QAAA,UAAY,EAAQ,QAAA,YACpB,QAAA,aAAe,EAAM,QAAA,WAGvB,IAAM,EAAI,GACG,QAAA,eAA2B,SAAwB,GACrD,OAAA,KAAK,IAAI,GAAI,GAAK,GAAK,KAAK,KAAK,EAAI,EAAI,GAAK,EAAA,IAAM,GAAK,GAElE,QAAA,cAAgB,EAAQ,QAAA,gBACxB,QAAA,iBAAmB,EAAM,QAAA;;;;AFxD3B,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,GAAA,QAAA,IAAA,QAAA,YAAA,EAFA,IAAA,EAAA,EAAA,QAAA,oBAEA,QAAQ,IAAI,EAAA","file":"index.map","sourceRoot":"..","sourcesContent":["import stuff from './src/ease/*.ts';\r\n\r\nconsole.log(stuff);","export const PI = Math.PI,\r\n  TAU = 2 * PI;\r\n  ","/****\r\n * Custom ease functions, designed with functional programming concepts.\r\n */\r\nimport { TAU, PI } from './consts';\r\n\r\nfunction inverse(inFunc: Function): Function {\r\n  return function outFunc(d: number): number {\r\n    return 1 - inFunc(d - 1);\r\n  };\r\n}\r\n\r\nfunction inOut(inFunc: Function): Function {\r\n  const outFunc = inverse(inFunc);\r\n  return function(d: number): number {\r\n    return d < 0.5 ? 0.5 * inFunc(d * 2) : 0.5 + 0.5 * outFunc(2 * d - 1);\r\n  };\r\n}\r\n\r\nexport const easeLinear: Function = function linear(d: number): number {\r\n  return d;\r\n};\r\n\r\nexport const easeInQuad: Function = function easeInQuad(d: number): number {\r\n    return d * d;\r\n  },\r\n  easeOutQuad: Function = inverse(easeInQuad),\r\n  easeInOutQuad: Function = inOut(easeInQuad);\r\n\r\nexport const easeInCub: Function = function easeInCub(d: number): number {\r\n    return d * d * d;\r\n  },\r\n  easeOutCub = inverse(easeInCub),\r\n  easeInOutCub = inOut(easeInCub);\r\n\r\nexport const easeInQuart: Function = function easeInQuart(d: number): number {\r\n    return d * d * d * d;\r\n  },\r\n  easeOutQuart = inverse(easeInQuart),\r\n  easeInOutQuart = inOut(easeInQuart);\r\n\r\nexport const easeInQuint: Function = function easeInQuint(d: number): number {\r\n    return d * d * d * d * d;\r\n  },\r\n  easeOutQuint = inverse(easeInQuint),\r\n  easeInOutQuint = inOut(easeInQuint);\r\n\r\nexport const easeOutSin: Function = function easeInSin(d: number): number {\r\n    return Math.sin(d * PI * 0.5);\r\n  },\r\n  easeInSin = inverse(easeOutSin),\r\n  easeInOutSin = inOut(easeInSin);\r\n\r\n\r\nconst p = 0.3;\r\nexport const easeOutElastic: Function = function easeOutElastic(d: number): number {\r\n    return Math.pow(2, -10 * d) * Math.sin((d - p / 4) * TAU / p) + 1;\r\n  },\r\n  easeInElastic = inverse(easeOutElastic),\r\n  easeInOutElastic = inOut(easeInElastic);\r\n"]}